-- Identity Lemmas
idTransLemma : {A : U} -> (a : A) -> (b : A) -> a = b -> (c : A) -> b = c -> a = c
idTransLemma := \a. \b. \p. ind[=[A]](a. b. p. (c : A) -> b = c -> a = c, z. \c. \q. ind[=[A]](a. c. p. a = c, z'. refl[z'], z, c, q), a, b, p)

idTrans : {A : U} -> {a : A} -> {b : A} -> {c : A} -> a = b -> b = c -> a = c
idTrans := \p. idTransLemma a b p c

cong : {A : U} -> {a : A} -> {b : A} -> a = b -> {B : U} -> (f : A -> B) -> f a = f b
cong := \p. \f. ind[=[A]](a. b. p. f a = f b, z. refl[f z], a, b, p)

-- Addition
add : Nat -> Nat -> Nat
add := \n. ind[Nat](Nat -> Nat, \n. n, n. g. \m. succ(g m), n)

rAddId : (a : Nat) -> add a 0 = a
rAddId := \a. ind[Nat](n. add n 0 = n, refl[0], m. g. cong g (\(n : Nat). succ(n)), a)

-- Addition is commutative
addCommLemma : (a : Nat) -> (b : Nat) -> add a succ(b) = add succ(a) b
addCommLemma := \a. \b. ind[Nat](n. add n succ(b) = add succ(n) b, refl[succ(b)], m. g. cong g (\(n : Nat). succ(n)), a)

addComm : (a : Nat) -> (b : Nat) -> add a b = add b a
addComm := \a. \b. ind[Nat](n. add a n = add n a, rAddId a, m. g. idTrans (addCommLemma a m) (cong g (\(n : Nat). succ(n))), b)

#check addComm
